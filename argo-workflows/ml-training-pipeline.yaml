apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: fraud-model-training
  namespace: argowf
spec:
  entrypoint: ml-pipeline
  serviceAccountName: argo-workflow
  arguments:
    parameters:
    - name: model-version
      value: "v2"
    - name: git-repo
      value: "https://github.com/yourusername/fraud-model-rollout-demo"
    - name: git-branch
      value: "main"
    - name: mlflow-tracking-uri
      value: "http://mlflow.test:5000"
    - name: harbor-registry
      value: "harbor.test/mlops"

  volumeClaimTemplates:
  - metadata:
      name: work
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi

  templates:
  - name: ml-pipeline
    dag:
      tasks:
      - name: clone-repo
        template: git-clone
        arguments:
          parameters:
          - name: repo
            value: "{{workflow.parameters.git-repo}}"
          - name: branch
            value: "{{workflow.parameters.git-branch}}"

      - name: prepare-data
        dependencies: [clone-repo]
        template: data-preparation

      - name: validate-data
        dependencies: [prepare-data]
        template: data-validation

      - name: train-baseline
        dependencies: [validate-data]
        template: train-model
        arguments:
          parameters:
          - name: model-type
            value: "baseline"
          - name: model-version
            value: "v1"

      - name: train-candidate
        dependencies: [validate-data]
        template: train-model
        arguments:
          parameters:
          - name: model-type
            value: "candidate"
          - name: model-version
            value: "{{workflow.parameters.model-version}}"

      - name: evaluate-models
        dependencies: [train-baseline, train-candidate]
        template: model-evaluation

      - name: build-containers
        dependencies: [evaluate-models]
        template: container-build
        when: "{{tasks.evaluate-models.outputs.result}} == 'passed'"

      - name: update-manifest
        dependencies: [build-containers]
        template: update-k8s-manifest

      - name: trigger-deployment
        dependencies: [update-manifest]
        template: argocd-sync

      - name: notify-completion
        dependencies: [trigger-deployment]
        template: send-notification

  # Git clone template
  - name: git-clone
    inputs:
      parameters:
      - name: repo
      - name: branch
    container:
      image: alpine/git:latest
      command: [sh, -c]
      args:
      - |
        cd /work
        git clone --branch {{inputs.parameters.branch}} {{inputs.parameters.repo}} .
        echo "Repository cloned successfully"
      volumeMounts:
      - name: work
        mountPath: /work

  # Data preparation template
  - name: data-preparation
    container:
      image: python:3.9-slim
      command: [sh, -c]
      args:
      - |
        cd /work
        pip install pandas numpy scikit-learn
        python src/data.py
        echo "Data preparation completed"
      volumeMounts:
      - name: work
        mountPath: /work

  # Data validation template
  - name: data-validation
    container:
      image: python:3.9-slim
      command: [python, -c]
      args:
      - |
        import pandas as pd
        import json

        # Load and validate data
        df = pd.read_csv('/work/data/enriched/fraud_dataset.csv')

        validation_results = {
            'total_rows': len(df),
            'fraud_rate': float(df['Class'].mean()),
            'features': df.shape[1],
            'missing_values': int(df.isnull().sum().sum()),
            'status': 'passed' if len(df) > 900000 else 'failed'
        }

        print(json.dumps(validation_results, indent=2))

        if validation_results['status'] == 'failed':
            raise ValueError("Data validation failed")
      volumeMounts:
      - name: work
        mountPath: /work

  # Model training template
  - name: train-model
    inputs:
      parameters:
      - name: model-type
      - name: model-version
    outputs:
      parameters:
      - name: model-uri
        valueFrom:
          path: /tmp/model_uri.txt
      - name: metrics
        valueFrom:
          path: /tmp/metrics.json
    container:
      image: "{{workflow.parameters.harbor-registry}}/ml-trainer:latest"
      command: [sh, -c]
      args:
      - |
        cd /work
        export MODEL_TYPE={{inputs.parameters.model-type}}
        export MODEL_VERSION={{inputs.parameters.model-version}}
        export MLFLOW_TRACKING_URI={{workflow.parameters.mlflow-tracking-uri}}

        python src/train_model.py

        # Copy outputs for workflow
        cp models/{{inputs.parameters.model-version}}_model_uri.txt /tmp/model_uri.txt
        cp models/{{inputs.parameters.model-version}}_metrics.json /tmp/metrics.json
      env:
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: mlflow-s3-secret
            key: AWS_ACCESS_KEY_ID
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: mlflow-s3-secret
            key: AWS_SECRET_ACCESS_KEY
      - name: MLFLOW_S3_ENDPOINT_URL
        value: "http://minio.test:9000"
      volumeMounts:
      - name: work
        mountPath: /work

  # Model evaluation template
  - name: model-evaluation
    outputs:
      parameters:
      - name: result
        valueFrom:
          path: /tmp/evaluation_result.txt
    container:
      image: python:3.9-slim
      command: [python, -c]
      args:
      - |
        import json

        # Read metrics from both models
        with open('/work/models/v1_metrics.json', 'r') as f:
            v1_metrics = json.load(f)

        with open('/work/models/v2_metrics.json', 'r') as f:
            v2_metrics = json.load(f)

        # Evaluation logic
        recall_improvement = (v2_metrics['recall'] - v1_metrics['recall']) / v1_metrics['recall']
        precision_maintained = v2_metrics['precision'] >= (v1_metrics['precision'] * 0.95)

        if recall_improvement >= 0.05 and precision_maintained:
            result = "passed"
            print(f"‚úÖ Model evaluation passed!")
            print(f"Recall improvement: {recall_improvement:.1%}")
            print(f"Precision: {v2_metrics['precision']:.3f} (baseline: {v1_metrics['precision']:.3f})")
        else:
            result = "failed"
            print(f"‚ùå Model evaluation failed")
            print(f"Recall improvement: {recall_improvement:.1%} (required: ‚â•5%)")
            print(f"Precision maintained: {precision_maintained}")

        with open('/tmp/evaluation_result.txt', 'w') as f:
            f.write(result)
      volumeMounts:
      - name: work
        mountPath: /work

  # Container build template
  - name: container-build
    container:
      image: gcr.io/kaniko-project/executor:latest
      command: [/kaniko/executor]
      args:
      - --context=/work
      - --dockerfile=/work/Dockerfile
      - --destination={{workflow.parameters.harbor-registry}}/fraud-model:{{workflow.uid}}
      - --destination={{workflow.parameters.harbor-registry}}/fraud-model:latest
      - --cache=true
      volumeMounts:
      - name: work
        mountPath: /work
      - name: docker-config
        mountPath: /kaniko/.docker/

  # Update Kubernetes manifest
  - name: update-k8s-manifest
    container:
      image: alpine/git:latest
      command: [sh, -c]
      args:
      - |
        cd /work

        # Read model URIs
        V1_URI=$(cat models/v1_model_uri.txt)
        V2_URI=$(cat models/v2_model_uri.txt)

        # Update configuration
        python scripts/update-model-config.py \
          --v1-uri "$V1_URI" \
          --v2-uri "$V2_URI" \
          --baseline-weight 80 \
          --candidate-weight 20

        # Commit and push changes
        git config user.name "Argo Workflows"
        git config user.email "argo@mlops.local"
        git add k8s/
        git commit -m "Update model URIs from workflow {{workflow.uid}}"
        git push origin {{workflow.parameters.git-branch}}
      volumeMounts:
      - name: work
        mountPath: /work
      - name: git-creds
        mountPath: /etc/git-creds
        readOnly: true

  # ArgoCD sync template
  - name: argocd-sync
    container:
      image: argoproj/argocd:v2.8.4
      command: [argocd]
      args:
      - app
      - sync
      - fraud-detection-models
      - --force
      - --prune
      - --server
      - argocd-server.argocd.svc.cluster.local
      - --auth-token
      - $(ARGOCD_TOKEN)
      env:
      - name: ARGOCD_TOKEN
        valueFrom:
          secretKeyRef:
            name: argocd-token
            key: token

  # Notification template
  - name: send-notification
    container:
      image: curlimages/curl:latest
      command: [sh, -c]
      args:
      - |
        echo "üöÄ ML Pipeline completed successfully!"
        echo "Workflow: {{workflow.name}}"
        echo "Models deployed to production"

        # Send Slack notification (if configured)
        if [ -n "$SLACK_WEBHOOK" ]; then
          curl -X POST $SLACK_WEBHOOK \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "ML Pipeline Completed",
              "blocks": [{
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "‚úÖ *Fraud Model Training Pipeline*\nWorkflow: `{{workflow.name}}`\nStatus: Deployed to Production"
                }
              }]
            }'
        fi
      env:
      - name: SLACK_WEBHOOK
        valueFrom:
          secretKeyRef:
            name: notification-config
            key: slack-webhook
            optional: true

  # Volumes
  volumes:
  - name: docker-config
    secret:
      secretName: harbor-docker-config
  - name: git-creds
    secret:
      secretName: git-credentials
